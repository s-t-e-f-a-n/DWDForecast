# Configuration file for dwdforecast.py
[DWD]           
	# DWD Station Name / Number
    # Use : https://wettwarn.de/mosmix/mosmix.html to find closest station to you
    # 
    DWDStation = 10381
    # This is the matching URL for the given station
    # Please also ensure the station provides Rad1h data (some do not - without this dataset, the simulation WILL NOT WORK
    # Only use the "all_stations" if you got decent hardware
    #DWDStationURL = 'http://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_S/all_stations/kml'
    #On Raspberries & alikes, use the one for your specific station: 
    DWDStationURL = http://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_L/single_stations/10381/kml
[SolarSystem]
    # GPS  Longitude of your solar system (use google maps etc. to find out)
    Longitute = 13.2885230408758
    # GPS  Latitude of your solar system (use google maps etc. to find out)
    Latitude = 52.4300994387164
    #Altitude [m] of your solar system´s location
    Altitude = 34
    # Elevation [Degrees]: Inclination angle of solar panels (0 degrees would be horizontal)
    Elevation = 20
    # Azimuth [Degrees] of your panels: Orientation - where 270=West, 180=South, 90=East
    Azimuth = 155
    # NumPanels [int] Number of panels per string in the solar system
    NumPanels = 1
    # NumStrings [int] Number of strings in the solar system
    NumStrings = 2
    # Albedo of your surrondind SolarSystem´s environment [%] with 100% = 1
    # Please see below for typical values:
    # https://pvpmc.sandia.gov/model…-ground-reflected/albedo/
    Albedo = 0.14
    # TEMPERATURE_MODEL_PARAMETERS valid parameters are:
    # open_rack_glass_glass
    # close_mount_glass_glass
    # open_rack_glass_polymer
    # insulated_back_glass_polymer
    # Please also see the pvlib documentation: https://pvlib-python.readthedocs.io/en/stable/api.html?highlight=TEMPERATURE_MODEL_PARAMETERS#pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS
    # Closest match for roof mounted systems seem to be the open_rack ones:
    TEMPERATURE_MODEL = open_rack_glass_polymer
    #
    # STS 25/5/2024 added configuration entry for more flexibility
    #
    # CEC_MOD_DB [string] - name or path to CEC module database
    # parameter choice:
    # - cecmod - CEC module database which comes whith pvlib
    # - a path and filename of an individual csv database, e.g. ./MY_sam-library-cec-modules-2019-03-05.csv
    CEC_MOD_DB  = MY_sam-library-cec-modules-2019-03-05.csv
    #
    # STS 25/5/2024 added configuration entry for more flexibility
    #
    # CEC_INV_DB [string] - name or path to CEC inverter database
    # parameter choice:
    # - cecinverter - CEC inverter database which comes whith pvlib
    # - a path and filename of an individual csv database, e.g. ./MY_sam-library-cec-inverters-2019-03-05.csv
    CEC_INV_DB  = MY_sam-library-cec-inverters-2019-03-05.csv
    #
    # InverterName [string] - Name of the inverter of your solar system
    # Caution: special characters need to be replaced with underscores
    # CSV file used by pvlib can be found in your python installation
    # e.g: /usr/local/lib/python3.5/dist-packages/pvlib/data
    # in sam-library-cec-inverters-2019-03-05.csv
    # So Map from name in CSV file 
    # SMA America: SB10000TL-US [240V]
    # To 
    # SMA_America__SB10000TL_US__240V_
    # You can also create your own ones - but need to adjust csv file in pvlib installation
    # Kostal__Plenticore_plus_10
    #InverterName = Kostal__Plenticore_plus_10
    #InverterName = SMA_America__SB10000TL_US__240V_
    #
    # STS 22/5/2024 added to MY_sam-library-cec-modules-2019-03-05.csv: Hoymiles Power Electronics Inc : HM-600N [240V],240,1.00135,591,612.976,37,-6.98154e-06,-0.000214298,-0.0532575,-0.179554,0.11,48,16.5669,29,48,4/21/2023,N
    InverterName = Hoymiles_Power_Electronics_Inc___HM_600N__240V_
    
    # ModuleName [string] - Name of the solar modules of your solar system
    # Caution: special characters need to be replaced with underscores
    # CSV file used by pvlib can be found in your python installation
    # e.g: /usr/local/lib/python3.5/dist-packages/pvlib/data
    # in sam-library-cec-modules-2019-03-05.csv
    # So Map from name in CSV file 
    # LG Electronics Inc. LG335E1C-A5
    # To 
    # LG_Electronics_Inc__LG335E1C_A5
    #
    # STS 22/5/2024 added to MY_sam-library-cec-modules-2019-03-05.csv: Trina Solar TSM-405DE09.08,Mono-c-Si,0,404.888,378,1.91,,,60,12.34,41.4,11.77,34.4,0.0040722,-0.110124,44.8,1.52752,12.3408,2.09059e-11,0.193303,3167.34,6.6459,-0.357,N,2023.10.31,11/16/2022
    ModuleName = Trina_Solar_TSM_405DE09_08
    
    #MyTimezone [string] - Timezone of DWD data: GMT 
    #https://pvlib-python.readthedocs.io/en/stable/timetimezones.html
    MyTimezone = UTC
    #
    #SimpleMultiplicationFactor [real]
    #A Factor that gets used to convert Rad1wh values to actual Powergen values (Rad1wh --> Rad1Energy)
    #Note: SimpleMultiplicationFactor is only being used for an approximate calculation that does not take azimuth - or elevation into account
    # SimpleMultiplicationFactor =  ModuleArea * ModuleEfficiency * InverterEfficiency
    # Modulearea [squaremeters] (e.g.)                  : 28 * 1*1.6 
    # ModuleEfficiency (from Datasheet of your panel)   : 0.196
    # InverterEfficiency (from Inverter Datasheet)      : 0.98
    # SimpleMultiplicationFactor = 0.278 * 44.8 * 0.196 * 0.98 = 8.605184
    # For the above values - this results in SimpleMultiplicationFactor below:
    SimpleMultiplicationFactor = 0.393
    #Temperatureoffset [real in °C] : an addition to the temperature input from DWDStation
    #Some users reported different actual temperatures whereas others were fine with the temperature values calculated by pvlib
    TemperatureOffset = 0
    
    
[Processing]
    #Sleeptime [seconds] : Time we pause before we check the DWD webpage for updates
    Sleeptime = 15
    #Configuration [String] : Simple - or Complex
    #Simple : We are pulling the data from DWD  once, perform the calculations, create the specified output and then terminate the program
    #Complex: We run the program in an endless loop, look for updates on the dwd site, perform the calculations once we receive updates and create the specified outputs
    ProcessingConfiguration = Complex    
    

[Output]
    # PrintOutput of the program [int] 0 = no, 1 = yes
    PrintOutput = 1
    # CSVOutput of the program [int] 0 = no, 1 = yes
    CSVOutput = 1
    # CSVFile - in case we have set CSVOutput to 1, we also must have a file to write to
    CSVFile = outputdwdforecast.csv
    # DBOutput of the program [int] 0 = no, 1 = yes - we output result to mysql Database
    # Tested with mariaDB
    DBOutput = 1
    # DBUser [string] : Name of the database user
    DBUser = dwd
    # DBPassword [string] : Password for database user DBUser
    DBPassword = dwd
    # DBHost [string] : Host machine of database 
    DBHost = localhost
    # DBPort [int] : The port being used to connect to the database (default 3306):
    DBPort = 3306
    # DBName [string] : Name of the database we are commiting to
    DBName = DWDForecast
    # DBTable [string] : Database table name that you want to commit your data to
    # Please note: The script is assuming the table below already exists
    # A Table with the following definition is what we are populating to:
    #describe dwd;
    #    +-------------+------------+------+-----+---------+-------+
    #    | Field       | Type       | Null | Key | Default | Extra |
    #    +-------------+------------+------+-----+---------+-------+
    #    | mydatetime  | datetime   | NO   | PRI | NULL    |       |
    #    | mytimestamp | int(11)    | NO   | PRI | 0       |       |
    #    | Rad1h       | float(8,2) | NO   |     | 0.00    |       |
    #    | PPPP        | float(8,2) | NO   |     | 0.00    |       |
    #    | FF          | float(5,2) | NO   |     | 0.00    |       |
    #    | TTT         | float(5,2) | NO   |     | 0.00    |       |
    #    | Rad1wh      | float(8,2) | NO   |     | 0.00    |       |
    #    | Rad1Energy  | float(8,2) | NO   |     | 0.00    |       |
    #    | ACSim       | float(8,2) | NO   |     | 0.00    |       |
    #    | DCSim       | float(8,2) | NO   |     | 0.00    |       |
    #    | CellTempSim | float(5,2) | NO   |     | 0.00    |       |
    #    +-------------+------------+------+-----+---------+-------+
    DBTable = dwd
   
    
    
